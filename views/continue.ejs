<!DOCTYPE html>
<html>
  <head>
    <title>Share Escrow Bot</title>
    <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
    
  </head>
  <body>
    <div id="notready" style="display:inline">
      Either one party has not confirmed the transaction or the seller has not uploaded the item
    </div>
    <div id="complete" style="display:none">
      Both parties have agreed to the transaction, this stage is complete.<br>
      Please check if a more recent stage of the process has been shared in your chat.<br>
    </div>
    <div id="waiting" style="display:none">
      You have agreed to the transaction.<br>
      We are currently waiting for {name} to complete this step.<br>
      <div id="waiting_on">{role}</div>
    </div>
    <div id="already_sent" style="display:none">
      We have already sent you a direct message, please upload the pdf in that chat.<br>
    </div>
    <div id="check_messages" style="display:none">
      We have sent you a direct message, please upload your pdf there.<br>
    </div>
    <div id="review" style="display:none">
      Item is <span id="item">{item}</span>
      Price is $<span id="price">{price}</span>
    </div>
    <div id="confirm" style="display:none">
      <button id="confirm_button" onclick="confirm()">
        Confirm and Continue
      </button>
      <span id="confirm_id"></span>
      <span id="confirm_role"></span>
    </div>
    <script>
      (function(){
        var oldLog = console.log;
        console.log = function (message) {
          // document.write('message: ' + message);
          // document.write(typeof(message));
          // message = String(message);
          return fetch('https://hospitable-quarter.glitch.me/log', {
            body: JSON.stringify({text: message}), // must match 'Content-Type' header
            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', // include, same-origin, *omit
            headers: {
              'user-agent': 'Mozilla/4.0 MDN Example',
              'content-type': 'application/json'
            },
            method: 'POST', // *GET, POST, PUT, DELETE, etc.
            mode: 'cors', // no-cors, cors, *same-origin
            redirect: 'follow', // *manual, follow, error
            referrer: 'no-referrer', // *client, no-referrer
          })
          .then(function(response) {return response.json()}) // parses response to JSON
          oldLog.apply(console, arguments);
        };
      })();
      // Sends response messages via the Send API
      function sendText (psid, message) {
        let req = 'https://hospitable-quarter.glitch.me/send_message';
        let body = {
          psid: psid,
          message: message
        };
        fetch(req, {
          body: JSON.stringify(body), // must match 'Content-Type' header
          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
          credentials: 'same-origin', // include, same-origin, *omit
          headers: {
            'user-agent': 'Mozilla/4.0 MDN Example',
            'content-type': 'application/json'
          },
          method: 'POST', // *GET, POST, PUT, DELETE, etc.
          mode: 'cors', // no-cors, cors, *same-origin
          redirect: 'follow', // *manual, follow, error
          referrer: 'no-referrer', // *client, no-referrer
        });
      }
      function confirm() {
        // post to server id/role of confirming user
        // on receive, parse json, check if both_agreed
        // if yes: shareflow to process payments
        // if no: close browser
        let data = {
          psid: Document.getElementById('confirm_id').value,
          role: Document.getElementById('confirm_role').value,
        };
        fetch('https://hospitable-quarter.glitch.me/confirm', {
          credentials: 'same-origin',
          header: new Headers({ 'Content-Type': 'application/json' }),
          method: 'POST',
          body: JSON.stringify(strdata),
        }).then((response) => {
          if (!response.ok) throw Error(response.statusText);
          return response.json();
        }).then((data) => {
          if (data.share_flow) {
            let message = {
              "attachment":{
                "type":"template",
                "payload":{
                  "template_type":"generic",
                  "elements": [{
                    "title":"Transaction Agreed to, now enter Payment info",
                    "image_url": "https://ivycoach.com/content/uploads/2011/07/University-Of-Michigan-Admissions-Stats.jpg",
                    "subtitle": "SUBTITLE",
                    "default_action":{
                      "type":"web_url",
                      "url": "https://hospitable-quarter.glitch.me/payments"
                    },
                    "buttons":[{
                      "messenger_extensions": true,
                      "type":"web_url",
                      "url":"https://hospitable-quarter.glitch.me/payments", // ?txid=?
                      "webview_height_ratio":"tall",
                      "title":"Enter Payment Info"
                    }]
                  }]
                }
              }
            };
            MessengerExtensions.beginShareFlow(function(share_response) {
              // User dismissed without error, but did they share the message?
              if(response.is_sent === true){ 
                // User shared. We're done here!
                MessengerExtensions.requestCloseBrowser();
                console.log('success');
              }
              else{
                // User canceled their share! 
                // try again?
              }
            }, 
            function(errorCode, errorMessage) {      
              // An error occurred in the process
              console.log('error');
            },
            message, 
            "current_thread");
          }
          else {
            MessengerExtensions.requestCloseBrowser(null, null);
          }
        }).catch(error => console.log(error));
      };
      console.log('in script');
      window.extAsyncInit = function() {
        // console.log(MessengerExtensions);
        /*function send_private_message() {
          console.log('in send_pm');
          let user = '';
          MessengerExtensions.getContext("419937085114571",
            function success(thread_context) {
              console.log(thread_context.type);
              user = thread_context.psid;
              console.log('got context, about to send pm');
              if (typeof sendText == 'undefined'){
                  console.log('sendtext undefined');
              }
              sendText(user, "We are in the private chat");
            },
            function error(err) {
              console.log("Error on get context in askPermission");
            }
          );
        }*/
        function ask_permission(psid) {
          MessengerExtensions.getGrantedPermissions(function (permissions_response) {
            let permission = permissions_response.permissions // list of permissions granted
            console.log(permission);
            if (permission.indexOf('user_messaging') > -1) {
              // send message
              sendText(psid, 'We are in a private chat. Please upload your pdf here.');
            }
            else {
              // ask for permission then send message
              MessengerExtensions.askPermission(
                function (permission_response) {
                  if (permission.indexOf('user_messaging') > -1) {
                    sendText(psid, 'We are in a private chat. Please upload your pdf here.');
                  }
                  else {
                    console.log('permission not granted?');
                  }
                },function(errorCode, errorMessage) {
                  // Error occurred
                  console.log('error asking for permission');
                }
                "user_messaging"
              );
              
            }
          }, function() {
            // An error occurred'
            console.log("Error in granted");
          });
        }
        MessengerExtensions.getContext("419937085114571",
          function success(thread_context) {
            let user = thread_context.psid;
            // find whether user is buyer or seller
            fetch('https://hospitable-quarter.glitch.me/api/{txid}', { credentials: 'same-origin' })
            .then((response) => {
              if (!response.ok) throw Error(response.statusText);
              return response.json();
            })
            .then((data) => {
              // set displayed elements appropriately 
              // perhaps check if both confirmed first (stage finished)
              Document.getElementById('item').value = data.item;
              Document.getElementById('price').value = data.price;
              if (data.seller === user) {
                if (data.asked_seller) {
                  if (data.seller_uploaded){
                    Document.getElementById('review').style = 'display:inline';
                    if (data.seller_confirmed) { // factor this out to a function
                      if (data.buyer_confirmed) {
                        // this stage is complete
                        Document.getElementById('complete').style = 'display:inline';
                      }
                      else {
                        Document.getElementById('waiting').style = 'display:inline';
                        Document.getElementById('waiting_on').value = 'Buyer';
                      }
                    }
                    else {
                      // show confirm button
                      Document.getElementById('confirm').style = 'display:inline';
                      // hidden form elements?
                      Document.getElementById('confim_id').value = user;
                      Document.getElementById('confirm_role').value = 'buyer';
                    }
                  }
                  else { 
                    // seller hasn't uploaded
                    Document.getElementById('already_sent').style = 'display:inline';
                    // return ? 
                  }
                }
                else {
                  // assert haven't uploaded
                  // haven't asked
                  ask_permission(user);
                  Document.getElementById('check_messages').style = 'display:inline';
                  // return ? 
                }
                Document.getElementById('role').value = 'seller';
              }
              else {
                // buyer
                Document.getElementById('role').value = 'buyer';
                Document.getElementById('review').style = 'display:inline'; // worth factoring out?
                if (data.buyer_confirmed) { // factor out to function with (other_confirmed, you_confirmed)
                  if (data.seller_confirmed) {
                    // this stage is complete
                    Document.getElementById('complete').style = 'display:inline';
                  }
                  else {
                    // waiting on seller
                    Document.getElementById('waiting').style = 'display:inline';
                    Document.getElementById('waiting_on').value = 'Seller';
                  }
                }
                else {
                  // show confirm button
                  Document.getElementById('confirm').style = 'display:inline';
                  // hidden form elements?
                  Document.getElementById('confim_id').value = user;
                  Document.getElementById('confirm_role').value = 'buyer';
                }
              }
              
              
            })
            .catch(error => console.log(error));
            // if seller & has not uploaded, check permission & tell to upload
            // then for buyer and seller show button to confirm
            // where once they click, checks if both have the agreed
            // & if they have sharesflow to begin processing payments
            // & if not close browser, then if they click again show waiting for other party
            // check this last part first
          },
          function error(err) {
            console.log("Error in getting context for Confinm and Continue");
          }
        );
        // seller flow
        // check whether the pdf has been uploaded
        // buyer flow
        // show them button to confirm, if they are second to confirm once clicked, shareflow
      };
      (function(d, s, id){
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {return;}
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.com/en_US/messenger.Extensions.js";
        fjs.parentNode.insertBefore(js, fjs);
      }(document, 'script', 'Messenger'));
    </script>
  </body>
</html>