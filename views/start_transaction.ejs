<!DOCTYPE html>
<html>
  <head>
    <title>Share Escrow Bot</title>
    <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  </head>
  <body>
    <div id="test">
      kajsdfjkasdhjgajsdklgfadsjhadlsf
    </div>
    <script>var txid = <%- JSON.stringify(txid) %>;</script>
    <script>
      // document.getElementById('in_script').style='display:inline';
      // document.write('hello world');
      (function(){
        var oldLog = console.log;
        console.log = function (message) {
          // document.write('message: ' + message);
          // document.write(typeof(message));
          // message = String(message);
          return fetch('https://hospitable-quarter.glitch.me/log', {
            body: JSON.stringify({text: message}), // must match 'Content-Type' header
            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', // include, same-origin, *omit
            headers: {
              'user-agent': 'Mozilla/4.0 MDN Example',
              'content-type': 'application/json'
            },
            method: 'POST', // *GET, POST, PUT, DELETE, etc.
            mode: 'cors', // no-cors, cors, *same-origin
            redirect: 'follow', // *manual, follow, error
            referrer: 'no-referrer', // *client, no-referrer
          })
          .then(function(response) {return response.json()}) // parses response to JSON
          oldLog.apply(console, arguments);
        };
      })();
      console.log('in script');
      console.log('txid: '.concat(txid));
      // Sends response messages via the Send API
      console.log('hello');
      let x = txid;
      // console.log(txid);
      function sendText (psid, message) {
        let req = 'https://hospitable-quarter.glitch.me/send_message';
        let body = {
          psid: psid,
          message: message
        };
        fetch(req, {
          body: JSON.stringify(body), // must match 'Content-Type' header
          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
          credentials: 'same-origin', // include, same-origin, *omit
          headers: {
            'user-agent': 'Mozilla/4.0 MDN Example',
            'content-type': 'application/json'
          },
          method: 'POST', // *GET, POST, PUT, DELETE, etc.
          mode: 'cors', // no-cors, cors, *same-origin
          redirect: 'follow', // *manual, follow, error
          referrer: 'no-referrer', // *client, no-referrer
        });
      }
      function confirm() {
        // post to server id/role of confirming user
        // on receive, parse json, check if both_agreed
        // if yes: shareflow to process payments
        // if no: close browser
        let data = {
          psid: document.getElementById('confirm_id').value,
          role: document.getElementById('confirm_role').value,
          txid: txid,
        };
        let url = 'https://hospitable-quarter.glitch.me/user_agree';
        console.log(url);
        fetch(url, {
          credentials: 'same-origin',
          header: new Headers({ 'Content-Type': 'application/json' }),
          method: 'POST',
          body: JSON.stringify(strdata),
        }).then((response) => {
          if (!response.ok) throw Error(response.statusText);
          return response.json();
        }).then((data) => {
          if (data.share_flow) {
            let url = "https://hospitable-quarter.glitch.me/payments" + txid;
            let message = {
              "attachment":{
                "type":"template",
                "payload":{
                  "template_type":"generic",
                  "elements": [{
                    "title":"Transaction Agreed to, now click to pay",
                    "image_url": "https://ivycoach.com/content/uploads/2011/07/University-Of-Michigan-Admissions-Stats.jpg",
                    "subtitle": "SUBTITLE",
                    "default_action":{
                      "type":"web_url",
                      "url": url,
                      "messenger_extensions": true,
                      "webview_height": "tall",
                    },
                    "buttons":[{
                      "messenger_extensions": true,
                      "type":"web_url",
                      "url":status_url, // ?txid=?
                      "webview_height_ratio":"tall",
                      "title":"Process Payment"
                    },{
                      "messenger_extensions": true,
                      "type":"web_url",
                      "url":status_url, // ?txid=?
                      "webview_height_ratio":"tall",
                      "title":"Check Status"
                    }]
                  }]
                }
              }
            };
            MessengerExtensions.beginShareFlow(function(share_response) {
              // User dismissed without error, but did they share the message?
              if(response.is_sent === true){ 
                // User shared. We're done here!
                MessengerExtensions.requestCloseBrowser();
                console.log('success');
              }
              else{
                // User canceled their share! 
                // try again?
              }
            }, 
            function(errorCode, errorMessage) {      
              // An error occurred in the process
              console.log('error');
            },
            message, 
            "current_thread");
          }
          else {
            MessengerExtensions.requestCloseBrowser(null, null);
          }
        }).catch(error => console.log(error));
      }
      
      function deny() {
        // post to server id/role of confirming user
        // on receive, parse json, check if both_agreed
        // if yes: shareflow to process payments
        // if no: close browser
        console.log('deny called');
        let data = {
          psid: $('#confirm_id').html(),
          role: $('#confirm_role').html(),
          txid: txid,
        };
        console.log(data);
        let url = 'https://hospitable-quarter.glitch.me/user_disagree';
        console.log(url);
        fetch(url, {
          credentials: 'same-origin',
          header: new Headers({ 'Content-Type': 'application/json' }),
          method: 'POST',
          body: JSON.stringify(data),
        }).then((response) => {
          if (!response.ok) throw Error(response.statusText);
          return response.json();
        }).then((data) => {
          console.log('got deny data');
          if (data.share_flow) {
            let url = "https://hospitable-quarter.glitch.me/payments" + txid;
            let message = {
              "attachment":{
                "type":"template",
                "payload":{
                  "template_type":"generic",
                  "elements": [{
                    "title":"Transaction Agreed to, now click to pay",
                    "image_url": "https://ivycoach.com/content/uploads/2011/07/University-Of-Michigan-Admissions-Stats.jpg",
                    "subtitle": "SUBTITLE",
                    "default_action":{
                      "type":"web_url",
                      "url": url,
                      "messenger_extensions": true,
                      "webview_height": "tall",
                    },
                    "buttons":[{
                      "messenger_extensions": true,
                      "type":"web_url",
                      "url":status_url, // ?txid=?
                      "webview_height_ratio":"tall",
                      "title":"Process Payment"
                    },{
                      "messenger_extensions": true,
                      "type":"web_url",
                      "url":status_url, // ?txid=?
                      "webview_height_ratio":"tall",
                      "title":"Check Status"
                    }]
                  }]
                }
              }
            };
            MessengerExtensions.beginShareFlow(function(share_response) {
              // User dismissed without error, but did they share the message?
              if(response.is_sent === true){ 
                // User shared. We're done here!
                MessengerExtensions.requestCloseBrowser();
                console.log('success');
              }
              else{
                // User canceled their share! 
                // try again?
              }
            }, 
            function(errorCode, errorMessage) {      
              // An error occurred in the process
              console.log('error');
            },
            message, 
            "current_thread");
          }
          else {
            console.log("about to close browser");
            MessengerExtensions.requestCloseBrowser(null, null);
          }
        }).catch(error => console.log(error));
      }
      
      window.extAsyncInit = function() {
        console.log(MessengerExtensions);
        console.log('messenger extensions sdk loaded');
        function send_private_message() {
          console.log('in send_pm');
          let user = '';
          MessengerExtensions.getContext("419937085114571",
            function success(thread_context) {
              console.log(thread_context.type);
              user = thread_context.psid;
              console.log('got context, about to send pm');
              if (typeof sendText == 'undefined'){
                  console.log('sendtext undefined');
              }
              sendText(user, "We are in the private chat");
            },
            function error(err) {
              console.log("Error on get context in askPermission");
            }
          );
        }
        function ask_profile(psid) {
          MessengerExtensions.getGrantedPermissions(function (permissions_response) {
            if (permissions_response.permission.indexOf('user_profile') > -1) {
              // return getName();
            }
            else {
              MessengerExtensions.askPermission(
                function (permission_response) {
                  if (permission_response.permissions.indexOf('user_profile') > -1) {
                    // return getName();
                  }
                  else {
                    console.log('permission denied');
                  }
                }, function(errorCode, errorMessage) {
                  console.log('user_profile permission denied');
                },
                'user_profile'
              );
            }
          }, function () {
            console.log('error getting granted permissions');
          });
        }
        function ask_messaging(psid) {
          console.log('ask_messaging called');
          MessengerExtensions.getGrantedPermissions(function (permissions_response) {
            if (permissions_response.permission.indexOf('user_messaging') > -1) {
              // return getName();
            }
            else {
              MessengerExtensions.askPermission(
                function (permission_response) {
                  if (permission_response.permissions.indexOf('user_messaging') > -1) {
                    // return getName();
                  }
                  else {
                    console.log('permission denied');
                  }
                }, function(errorCode, errorMessage) {
                  console.log('user_messaging permission denied');
                },
                'user_messaging'
              );
            }
          }, function () {
            console.log('error getting granted permissions');
          });
        }
        function buyer(info, user) {
          console.log('user is buyer');
          // buyer
          document.getElementById('role').innerHTML = 'buyer';
          document.getElementById('review').style = 'display:inline'; // worth factoring out?
          if (info.buyer_confirmed) { // factor out to function with (other_confirmed, you_confirmed)
            if (info.seller_confirmed) {
              // this stage is complete
              document.getElementById('complete').style = 'display:inline';
            }
            else {
              // waiting on seller
              document.getElementById('waiting').style = 'display:inline';
              document.getElementById('waiting_on').value = 'Seller';
            }
          }
          else {
            // show confirm button
            console.log($('#test'));
            console.log('showing confirm button');
            document.getElementById('confirm').style = 'display:inline';
            // hidden form elements?
            console.log('showing confirm/deny');
            console.log('user: '.concat(user));
            //console.log($('#confirm'));
            console.log(document.getElementById('confim_id'));
            $('#confirm_id').html(user).hide();
            //document.getElementById('confim_id').innerHTML = user;
            console.log('set_role: buyer');
            $('#confirm_role').html('buyer').hide();
            console.log('done with consoling1');
            //document.getElementById('confirm_role').innerHTML = 'buyer';
            console.log('id: '.concat($('#confirm_id').html()));
            console.log('role: '.concat($('#confirm_role').html()));
            console.log('done with consoling2');
          }
        }
        function seller(info, user) {
          console.log('user is seller');
          if (info.seller_confirmed){
            if (!info.seller_uploaded){
              if (!info.asked_seller) {
                
              }
              else {
                $('#check_messages').show();
              }
            }
            else {
              $('#complete').show();
            }
          }
          else {
            $('#confirm').show();
            // hidden form elements?
            console.log('showing confirm/deny');
            $('#confim_id').html(user);
            $('#confirm_role').html('seller');
          }
          if (info.asked_seller) {
            if (info.seller_uploaded){
              document.getElementById('review').style = 'display:inline';
              if (info.seller_confirmed) { // factor this out to a function
                if (info.buyer_confirmed) {
                  // this stage is complete
                  document.getElementById('complete').style = 'display:inline';
                }
                else {
                  document.getElementById('waiting').style = 'display:inline';
                  document.getElementById('waiting_on').value = 'Buyer';
                }
              }
              else {
                // show confirm button
                document.getElementById('confirm').style = 'display:inline';
                // hidden form elements?
                console.log('showing confirm/deny');
                document.getElementById('confim_id').innerHTML = user;
                document.getElementById('confirm_role').innerHTML = 'seller';
              }
            }
            else { 
              // seller hasn't uploaded
              document.getElementById('already_sent').style = 'display:inline';
              // return ? 
            }
          }
          else {
            // assert haven't uploaded
            // haven't asked
            // ask_permission(user);
            document.getElementById('check_messages').style = 'display:inline';
            // return ? 
          }
          Document.getElementById('role').value = 'seller';
        }
        function update_transaction(user, role) {
          if (role === 'seller') {
            ask_messaging(user);
          }
          ask_profile(user);
          data = {
            psid: user, 
            role: role,
          };
          url = 'https://hospitable-quarter.glitch.me/update_transaction'
          fetch(url, {
            body: JSON.stringify(data), // must match 'Content-Type' header
            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', // include, same-origin, *omit
            headers: {
              'user-agent': 'Mozilla/4.0 MDN Example',
              'content-type': 'application/json'
            },
            method: 'POST', // *GET, POST, PUT, DELETE, etc.
            mode: 'cors', // no-cors, cors, *same-origin
            redirect: 'follow', // *manual, follow, error
            referrer: 'no-referrer', // *client, no-referrer
          }).then((response) => {
            if (!response.ok) throw Error(response.statusText);
            return response.json();
          }).then((data) => {
            console.log(data);
          }).catch(error => console.log(error));
        }
        MessengerExtensions.getContext("419937085114571",
          function success(thread_context) {
            let user = thread_context.psid;
            // find whether user is buyer or seller
            console.log('got context: continue');
            let url = 'https://hospitable-quarter.glitch.me/transaction_info?txid=' + txid;
            console.log(url);
            fetch(url, { credentials: 'same-origin' })
            .then((response) => {
              if (!response.ok) throw Error(response.statusText);
              return response.json();
            })
            .then((data) => {
              // set displayed elements appropriately 
              // perhaps check if both confirmed first (stage finished)
              console.log('got data');
              console.log(data);
              let info = data.transaction;
              document.getElementById('item').innerHTML = info.itemDescription;
              document.getElementById('price').innerHTML = info.price;
              console.log('got price');
              console.log(info);
              console.log(info.seller);
              console.log(typeof info.seller);
              if (info.seller === null){
                console.log('in seller === null');
                if (info.buyer === user) {
                  console.log('showing buyer');
                  buyer(info, user);
                }
                else {
                  console.log('updating transaction');
                  update_transaction(user, 'seller'); // see todo what if above
                  console.log('showing seller');
                  seller(info, user);
                }
              }
              else if (info.buyer === null) {
                console.log('in buyer');
                if (info.seller === user) {
                  console.log('showing seller');
                  seller(info, user);
                }
                else {
                  console.log('updating transaction');
                  update_transaction(user, 'buyer');
                  console.log('showing buyer');
                  buyer(info, user);
                }
              }
              else {
                if (info.seller === user) {
                  seller(info, user);
                }
                else if (info.buyer === user) {
                  buyer(info, user);
                }
                else {
                  // error
                }
              }
            })
            .catch(error => console.log(error));
            // if seller & has not uploaded, check permission & tell to upload
            // then for buyer and seller show button to confirm
            // where once they click, checks if both have the agreed
            // & if they have sharesflow to begin processing payments
            // & if not close browser, then if they click again show waiting for other party
            // check this last part first
          },
          function error(err) {
            console.log("Error in getting context for Confirm and Continue");
          }
        );
        // seller flow
        // check whether the pdf has been uploaded
        // buyer flow
        // show them button to confirm, if they are second to confirm once clicked, shareflow
        
      };
      
      (function(d, s, id){
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {return;}
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.com/en_US/messenger.Extensions.js";
        fjs.parentNode.insertBefore(js, fjs);
      }(document, 'script', 'Messenger'));
    </script>
    <!--<div id="notready" style="display:inline">
      HasdfadasdfEither one party has not confirmed the transaction or the seller has not uploaded the item
      <br> <button onclick="click()" value="Click Me">dfajhsdk</button>
    </div>-->
    <div id="complete" style="display:none">
      Both parties have agreed to the transaction, this stage is complete.<br>
      Please check if a more recent stage of the process has been shared in your chat.<br>
    </div>
    <div id="waiting" style="display:none">
      You have agreed to the transaction.<br>
      We are currently waiting for {name} to complete this step.<br>
      <div id="waiting_on">{role}</div>
    </div>
    <div id="already_sent" style="display:none">
      We have already sent you a direct message, please upload the pdf in that chat.<br>
    </div>
    <div id="check_messages" style="display:none">
      We have sent you a direct message, please upload your pdf there.<br>
    </div>
    <div id="review" style="display:none">
      Item is <span id="item">{item}</span>
      Price is $<span id="price">{price}</span>
      you are the <span id="role"></span>
    </div>
    <div id="confirm" style="display:none">
      <button id="confirm_button" onclick="confirm()">
        Confirm and Continue
      </button>
      <button id="deny_button" onclick="deny()">
        Deny offer
      </button>
      <div id="confirm_id"></div>
      <div id="confirm_role"></div>
      
    </div>
    
    <div id="in_script" style="display:none">
      We are in the script
    </div>
    
    <div id="payments" style="display:none">
      <h2>
        Connect With Stripe
      </h2>
      <p>
        It looks like we don't know your payment information. For us to be able to complete your transaction, you must authorize us to use your Stripe account.
      </p>
      <a href="https://hospitable-quarter.glitch.me/authorize?redirect=https://hospitable-quarter.glitch.me/start_transaction?txid=<%- txid %>">
          <button id="paymentBtn" class="btn btn-primary">
            Pay with Stripe 
          </button>
      </a>
    </div>
    
    
  </body>
</html>